name: ManimLib Creation Package CI/CD with Conda

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test-conda:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        channels: conda-forge,defaults
        environment-file: creationbuild_package/environment.yml
        activate-environment: manimlib-creation
        auto-activate-base: false
        use-mamba: true
        mamba-version: "*"

    - name: Conda info
      shell: bash -l {0}
      run: |
        conda info
        conda list
        which python
        python --version

    - name: Debug directory structure
      shell: bash -l {0}
      run: |
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la
        echo "Checking for creationbuild_package:"
        ls -la creationbuild_package/ || echo "creationbuild_package not found"
        echo "Looking for requirements file:"
        find . -name "requirements_creation.txt" -type f
        echo "Checking if we are in creation_package already:"
        ls -la . | grep -E "(creationbuild_package|PROJECT_OVERVIEW)"

    - name: Install additional dependencies
      shell: bash -l {0}
      timeout-minutes: 15
      run: |
        # Use mamba for faster dependency resolution
        mamba install -c conda-forge pytest flake8 mypy build twine --yes
        # Install pip dependencies if needed
        if [ -f "creationbuild_package/requirements_creation.txt" ]; then
          pip install -r creationbuild_package/requirements_creation.txt
        elif [ -f "requirements_creation.txt" ]; then
          pip install -r requirements_creation.txt
        fi

    - name: Lint with flake8
      shell: bash -l {0}
      run: |
        # stop the build if there are Python syntax errors or undefined names
        if [ -f "creationbuild_package/creation.py" ]; then
          flake8 creationbuild_package/creation.py --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 creationbuild_package/creation.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        elif [ -f "creation.py" ]; then
          flake8 creation.py --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 creation.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        else
          echo "creation.py not found in expected locations"
          exit 1
        fi

    - name: Type checking with mypy
      shell: bash -l {0}
      run: |
        if [ -f "creationbuild_package/creation.py" ]; then
          mypy creationbuild_package/creation.py --ignore-missing-imports || true
        elif [ -f "creation.py" ]; then
          mypy creation.py --ignore-missing-imports || true
        else
          echo "creation.py not found for mypy check"
        fi

    - name: Test module import and self-test
      shell: bash -l {0}
      run: |
        if [ -d "creationbuild_package" ]; then
          python -c "import sys; sys.path.insert(0, 'creationbuild_package'); import creation; creation._module_self_test()"
        else
          python -c "import creation; creation._module_self_test()"
        fi

    - name: Run unit tests
      shell: bash -l {0}
      run: |
        if [ -f "creationbuild_package/test_creation.py" ]; then
          pytest creationbuild_package/test_creation.py -v
        elif [ -f "test_creation.py" ]; then
          pytest test_creation.py -v
        else
          echo "test_creation.py not found in expected locations"
          exit 1
        fi

    - name: Test Chinese encoding
      shell: bash -l {0}
      run: |
        if [ -f "creationbuild_package/中文输出文档/test_chinese_encoding.py" ]; then
          python creationbuild_package/中文输出文档/test_chinese_encoding.py
        elif [ -f "中文输出文档/test_chinese_encoding.py" ]; then
          python 中文输出文档/test_chinese_encoding.py
        else
          echo "test_chinese_encoding.py not found in expected locations"
          exit 1
        fi

    - name: Test demo scripts
      shell: bash -l {0}
      run: |
        if [ -f "creationbuild_package/Demo_ShowSubmobjectsOneByOne.py" ]; then
          python creationbuild_package/Demo_ShowSubmobjectsOneByOne.py
          python creationbuild_package/中文输出文档/Demo_ShowSubmobjectsOneByOne.py
        elif [ -f "Demo_ShowSubmobjectsOneByOne.py" ]; then
          python Demo_ShowSubmobjectsOneByOne.py
          python 中文输出文档/Demo_ShowSubmobjectsOneByOne.py
        else
          echo "Demo scripts not found in expected locations"
          exit 1
        fi

  build-conda:
    needs: test-conda
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.10'
        channels: conda-forge,defaults
        environment-file: creationbuild_package/environment.yml
        activate-environment: manimlib-creation
        auto-activate-base: false
        use-mamba: true
        mamba-version: "*"

    - name: Install build dependencies
      shell: bash -l {0}
      timeout-minutes: 10
      run: |
        mamba install -c conda-forge build twine conda-build anaconda-client --yes

    - name: Build Python package
      shell: bash -l {0}
      run: |
        cd creationbuild_package
        python -m build

    - name: Build Conda package
      shell: bash -l {0}
      run: |
        cd creationbuild_package
        conda-build . --output-folder conda-dist/

    - name: Check packages
      shell: bash -l {0}
      run: |
        cd creationbuild_package
        twine check dist/*
        # Check conda package
        conda install --use-local manimlib-creation --dry-run

    - name: Test installation from wheel
      shell: bash -l {0}
      run: |
        cd creationbuild_package
        pip install dist/*.whl
        python -c "import creation; creation._module_self_test()"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: |
          creationbuild_package/dist/
          creationbuild_package/conda-dist/

  publish-conda:
    needs: build-conda
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: conda-forge
      url: https://anaconda.org/conda-forge/manimlib-creation
    permissions:
      id-token: write

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: artifacts/

    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.10'
        channels: conda-forge,defaults
        activate-environment: publish
        auto-activate-base: false
        use-mamba: true
        mamba-version: "*"

    - name: Install publishing tools
      shell: bash -l {0}
      timeout-minutes: 10
      run: |
        mamba install -c conda-forge anaconda-client twine --yes

    - name: Publish to PyPI
      shell: bash -l {0}
      run: |
        cd artifacts/dist
        twine upload * --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

    - name: Publish to Anaconda Cloud
      shell: bash -l {0}
      run: |
        anaconda login --username ${{ secrets.ANACONDA_USERNAME }} --password ${{ secrets.ANACONDA_PASSWORD }}
        anaconda upload artifacts/conda-dist/**/*.tar.bz2 --user ${{ secrets.ANACONDA_USERNAME }}
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}

  security-conda:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.10'
        channels: conda-forge,defaults
        environment-file: creationbuild_package/environment.yml
        activate-environment: manimlib-creation
        auto-activate-base: false
        use-mamba: true
        mamba-version: "*"

    - name: Install security tools
      shell: bash -l {0}
      timeout-minutes: 10
      run: |
        mamba install -c conda-forge safety bandit --yes

    - name: Check dependencies for security vulnerabilities
      shell: bash -l {0}
      run: |
        cd creationbuild_package
        safety check -r requirements_creation.txt || true

    - name: Run bandit security linter
      shell: bash -l {0}
      run: |
        cd creationbuild_package
        bandit -r creation.py -f json -o bandit-report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: creationbuild_package/bandit-report.json