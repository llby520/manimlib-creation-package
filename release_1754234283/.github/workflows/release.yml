# 发布和部署工作流
# 用于自动化版本发布和包分发

name: Release and Deploy

# 触发条件
on:
  push:
    tags:
      - 'v*.*.*'  # 版本标签，如 v1.0.0, v2.1.3
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

# 环境变量
env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_NO_CACHE_DIR: 1

# 权限设置
permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # 预发布检查
  pre-release-check:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy>=1.19.0 packaging
        
    - name: Extract version information
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        elif [[ "${{ github.ref }}" =~ ^refs/tags/v(.*)$ ]]; then
          VERSION="${BASH_REMATCH[1]}"
          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            IS_PRERELEASE="true"
          else
            IS_PRERELEASE="false"
          fi
        else
          echo "Unable to determine version"
          exit 1
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION (prerelease: $IS_PRERELEASE)"
        
    - name: Validate modules
      run: |
        echo "Validating modules for release..."
        
        # 检查模块版本一致性
        python -c "
        import sys
        version = '${{ steps.version.outputs.version }}'
        
        modules = []
        try:
            import animation
            modules.append(('animation', animation.__version__))
        except ImportError:
            pass
            
        try:
            import composition
            modules.append(('composition', composition.__version__))
        except ImportError:
            pass
            
        try:
            import creation
            modules.append(('creation', creation.__version__))
        except ImportError:
            pass
        
        print(f'Target release version: {version}')
        for name, mod_version in modules:
            print(f'{name} module version: {mod_version}')
            if mod_version != version:
                print(f'⚠️  Version mismatch in {name} module')
        
        if not modules:
            print('❌ No modules found for release')
            sys.exit(1)
        else:
            print(f'✅ Found {len(modules)} modules ready for release')
        "
        
    - name: Run comprehensive tests
      run: |
        echo "Running comprehensive pre-release tests..."
        
        # 运行所有模块的自测试
        python -c "
        import sys
        
        modules = []
        try:
            import animation
            animation._module_self_test()
            modules.append('animation')
            print('✅ Animation module tests passed')
        except Exception as e:
            print(f'❌ Animation module tests failed: {e}')
            
        try:
            import composition
            composition._module_self_test()
            modules.append('composition')
            print('✅ Composition module tests passed')
        except Exception as e:
            print(f'❌ Composition module tests failed: {e}')
            
        try:
            import creation
            creation._module_self_test()
            modules.append('creation')
            print('✅ Creation module tests passed')
        except Exception as e:
            print(f'❌ Creation module tests failed: {e}')
        
        if len(modules) == 0:
            print('❌ No modules passed tests')
            sys.exit(1)
        else:
            print(f'✅ {len(modules)} modules passed all tests')
        "

  # 构建发布包
  build-packages:
    name: Build Release Packages
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [pre-release-check]
    
    strategy:
      matrix:
        package: [animation_package, compositionbuild_package, creation_package]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools
        
    - name: Update package version
      run: |
        VERSION="${{ needs.pre-release-check.outputs.version }}"
        PACKAGE="${{ matrix.package }}"
        
        if [ -d "$PACKAGE" ]; then
          cd "$PACKAGE"
          
          # 更新 setup.py 中的版本
          if [ -f "setup.py" ] || [ -f "setup_*.py" ]; then
            sed -i "s/version=\"[^\"]*\"/version=\"$VERSION\"/g" setup*.py
          fi
          
          # 更新 pyproject.toml 中的版本
          if [ -f "pyproject.toml" ]; then
            sed -i "s/version = \"[^\"]*\"/version = \"$VERSION\"/g" pyproject.toml
          fi
          
          echo "Updated $PACKAGE to version $VERSION"
          cd ..
        fi
        
    - name: Build package
      run: |
        PACKAGE="${{ matrix.package }}"
        
        if [ -d "$PACKAGE" ]; then
          cd "$PACKAGE"
          
          echo "Building $PACKAGE..."
          python -m build
          
          echo "Checking package..."
          python -m twine check dist/*
          
          echo "Package $PACKAGE built successfully"
          ls -la dist/
          cd ..
        else
          echo "Package directory $PACKAGE not found, skipping"
        fi
        
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.package }}-dist
        path: ${{ matrix.package }}/dist/
        retention-days: 30
      if: always()

  # 创建 GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [pre-release-check, build-packages]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: release-artifacts/
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # 收集所有构建的包
        find release-artifacts/ -name "*.whl" -o -name "*.tar.gz" | while read file; do
          cp "$file" release-assets/
        done
        
        # 创建源码包
        tar -czf release-assets/manimlib-modules-source-${{ needs.pre-release-check.outputs.version }}.tar.gz \
          --exclude='.git*' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='release-*' \
          .
        
        echo "Release assets prepared:"
        ls -la release-assets/
        
    - name: Generate release notes
      run: |
        VERSION="${{ needs.pre-release-check.outputs.version }}"
        
        cat > release-notes.md << EOF
        # Manimlib Modules v$VERSION
        
        ## 📦 包含的模块
        
        - **Animation Module**: 核心动画功能模块
        - **Composition Module**: 动画组合和编排模块  
        - **Creation Module**: 对象创建和操作模块
        
        ## ✨ 主要特性
        
        - 🐍 现代 Python 3.8+ 兼容性
        - 📝 完整的类型注解支持
        - 📚 全面的文档字符串
        - 🛡️ 增强的错误处理机制
        - ⚡ 性能优化和改进
        - 🧪 广泛的测试覆盖
        - 📦 现代化的包管理
        
        ## 🔧 安装方法
        
        ### 从 PyPI 安装（推荐）
        \`\`\`bash
        pip install manimlib-animation
        pip install manimlib-composition  
        pip install manimlib-creation
        \`\`\`
        
        ### 从源码安装
        \`\`\`bash
        # 下载并解压源码包
        tar -xzf manimlib-modules-source-$VERSION.tar.gz
        cd manimlib-modules-source-$VERSION
        
        # 安装各个模块
        pip install ./animation_package/
        pip install ./compositionbuild_package/
        pip install ./creation_package/
        \`\`\`
        
        ## 📋 系统要求
        
        - Python 3.8 或更高版本
        - NumPy 1.19.0 或更高版本
        - 推荐使用虚拟环境
        
        ## 🚀 快速开始
        
        \`\`\`python
        # 导入模块
        import animation
        import composition
        import creation
        
        # 查看版本信息
        print(f"Animation v{animation.__version__}")
        print(f"Composition v{composition.__version__}")
        print(f"Creation v{creation.__version__}")
        
        # 运行示例
        animation._usage_example()
        composition._usage_example()
        creation._usage_example()
        \`\`\`
        
        ## 📖 文档
        
        详细文档请参考各模块包中的 README 文件和源码注释。
        
        ## 🐛 问题反馈
        
        如果您发现任何问题或有改进建议，请在 GitHub Issues 中提交。
        
        ## 📄 许可证
        
        本项目采用 MIT 许可证，详见 LICENSE 文件。
        
        ---
        
        **完整更新日志**: [CHANGELOG.md](CHANGELOG.md)
        EOF
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.pre-release-check.outputs.version }}
        name: Manimlib Modules v${{ needs.pre-release-check.outputs.version }}
        body_path: release-notes.md
        files: release-assets/*
        prerelease: ${{ needs.pre-release-check.outputs.is-prerelease == 'true' }}
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 发布到 PyPI（可选）
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [create-release]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: pypi  # 需要在 GitHub 设置中配置环境
    
    strategy:
      matrix:
        package: [animation_package, compositionbuild_package, creation_package]
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.package }}-dist
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/
        skip-existing: true
        verbose: true
      continue-on-error: true  # 允许部分包发布失败

  # 发布后清理和通知
  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [create-release]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Update development version
      run: |
        VERSION="${{ needs.pre-release-check.outputs.version }}"
        
        # 计算下一个开发版本
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        NEXT_PATCH=$((PATCH + 1))
        NEXT_DEV_VERSION="$MAJOR.$MINOR.$NEXT_PATCH-dev"
        
        echo "Next development version: $NEXT_DEV_VERSION"
        
        # 这里可以添加更新开发版本的逻辑
        # 例如更新模块中的版本号为开发版本
        
    - name: Generate release summary
      run: |
        echo "=== Release Summary ==="
        echo "Version: ${{ needs.pre-release-check.outputs.version }}"
        echo "Prerelease: ${{ needs.pre-release-check.outputs.is-prerelease }}"
        echo "Release Status: ${{ needs.create-release.result }}"
        
        if [[ "${{ needs.create-release.result }}" == "success" ]]; then
          echo "✅ Release completed successfully!"
          echo "🎉 Manimlib Modules v${{ needs.pre-release-check.outputs.version }} is now available!"
        else
          echo "❌ Release failed or was cancelled."
        fi
        
        echo "📦 Available packages:"
        echo "- Animation Module"
        echo "- Composition Module"
        echo "- Creation Module"
        
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.pre-release-check.outputs.version }}"